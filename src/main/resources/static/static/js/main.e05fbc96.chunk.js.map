{"version":3,"sources":["components/deliverypp/product/ProductCard.js","components/deliverypp/product/ProductTable.js","components/deliverypp/product/ProductView.js","components/deliverypp/DeliveryppTab.js","components/main/NavBar.js","components/main/Footer.js","App.js","serviceWorker.js","index.js"],"names":["ProductCard","props","className","Card","style","width","Img","variant","src","imageUrl","Body","Title","category","Text","description","price","ProductTable","Table","striped","bordered","hover","products","map","product","key","id","ProductView","useState","cardView","setCardView","setProducts","useEffect","a","axios","get","response","deliveryppResponse","data","status","console","error","fetchData","onClick","DeliveryppTab","Tabs","defaultActiveKey","Tab","eventKey","title","NavBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","Footer","class","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e05fbc96.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nimport { Card, Button } from 'react-bootstrap';\r\n\r\nfunction ProductCard(props) {\r\n    return (\r\n        <div className=\"ProductCard m-1 p-2\">\r\n            <Card style={{ width: '18rem' }}>\r\n                <Card.Img variant=\"top\" src={props.imageUrl} />\r\n                <Card.Body>\r\n                    <Card.Title>{props.category}</Card.Title>\r\n                    <Card.Text>\r\n                        {\r\n                            props.description\r\n                        }\r\n                    </Card.Text>\r\n                    <Card.Text>\r\n                        {\r\n                            `RD$${props.price}`\r\n                        }\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductCard;","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nfunction ProductTable(props) {\r\n\r\n  return (\r\n    <Table striped bordered hover>\r\n      <thead>\r\n        <tr>\r\n          <th>#</th>\r\n          <th>Title</th>\r\n          <th>Description</th>\r\n          <th>Total</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.products.map((product) => {\r\n          return <tr key={product.id}>\r\n                    <td>{product.id}</td>\r\n                    <td>{product.category}</td>\r\n                    <td>{product.description}</td>\r\n                    <td>{product.price}</td>\r\n                </tr>;\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default ProductTable;\r\n","\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport ProductCard from './ProductCard';\r\nimport ProductTable from './ProductTable';\r\n\r\nimport './ProductView.css';\r\n\r\nimport axios from 'axios';\r\n\r\nfunction ProductView() {\r\n\r\n    const [cardView, setCardView] = useState(true);\r\n\r\n    const [products, setProducts] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n\r\n            const response = await axios.get('http://localhost:8080/api/product');\r\n\r\n            const deliveryppResponse = response.data;\r\n\r\n            if(deliveryppResponse.status === \"SUCCESS\") {\r\n                setProducts(deliveryppResponse.response);\r\n            } else {\r\n                console.error('Error getting products.');\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n\r\n    }, products);\r\n\r\n    const getProductCards = () => {\r\n        return products.map(product => {\r\n            return <ProductCard key={product.id} {...product} />\r\n        });\r\n    }\r\n\r\n    const getProductTable = () => {\r\n        return <ProductTable products={products} />\r\n    }\r\n    \r\n\r\n    return (\r\n        \r\n        <div className=\"ProductView\">\r\n            <div>\r\n                <button className=\"btn btn-primary\" onClick={() => setCardView(true)}>Card View</button>\r\n                <button className=\"btn btn-secondary\" onClick={() => setCardView(false)}>Card Table</button>\r\n            </div>\r\n            <div >\r\n                {\r\n                    cardView ? \r\n                            <div className=\"ProductCardContainer\">\r\n                                { getProductCards() }\r\n                            </div> \r\n                        \r\n                        : \r\n                        \r\n                        <div className=\"ProductTableContainer\">\r\n                            {\r\n                                getProductTable()\r\n                            }\r\n                        </div>\r\n                        \r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default ProductView;","import React from 'react';\r\n\r\nimport { Tabs, Tab } from \"react-bootstrap\";\r\n\r\nimport ProductView from './product/ProductView';\r\n\r\nfunction DeliveryppTab() {\r\n  return (\r\n    <div className=\"container-md\">\r\n      <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\">\r\n        <Tab eventKey=\"products\" title=\"Productos\">\r\n          <ProductView />\r\n        </Tab>\r\n        <Tab eventKey=\"orders\" title=\"Ordenes\">\r\n          etc\r\n        </Tab>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeliveryppTab;","import React from \"react\";\r\n\r\nimport { Navbar, NavDropdown, Nav, Form, Button, FormControl  } from 'react-bootstrap';\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <div className=\"NavBar\">\r\n      <Navbar bg=\"light\" expand=\"lg\">\r\n        <Navbar.Brand href=\"#home\">Deliverypp</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"#home\">Home</Nav.Link>\r\n            <Nav.Link href=\"#link\">Link</Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\nimport \"./Footer.css\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"Footer\">\r\n      <div class=\"footer-copyright text-center py-3\">\r\n        Â© 2020 Copyright:\r\n        <a href=\"\"> Deliverypp.com</a>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport './App.css';\n\nimport DeliveryppTab from './components/deliverypp/DeliveryppTab';\nimport NavBar from './components/main/NavBar';\nimport Footer from './components/main/Footer';\nimport Main from './components/main/Main';\n\n\nfunction App() {\n  return (\n    <div className=\"App border\">\n      <NavBar />\n      <DeliveryppTab />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}